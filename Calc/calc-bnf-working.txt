To eliminate left recursion
  < A > ::= < A > a1 | < A > a2 | ... | < A > an | < B >

  replace:

  < A > ::= < B > < A' >

  < A' > ::= a1 < A' > | a2 < A' > | ... | < A > an | ""
  
Parser (Context-Free)
=========================================
< Program > ::= < Statement > < Program' >

< Program' > ::=  < Statement > < Program' > 
                  | ""
                
< Statement >    ::= < Expression > NEWLINE

< Expression >   ::= < Term > < Expression' >

< Expression' >  ::= PLUS < Term > < Expression' >
                     | MINUS < Term > < Expression' >
                     | ""
                   
< Term >         ::= < Factor > < Term' >

< Term' >        ::= TIMES < Factor > < Term' >
                     | DIVIDE < Factor > < Term' >
                     | MOD < Factor > < Term' >
                     | ""

< Factor >       ::= < Base > < Factor' >

< Factor' >      ::= POW < Factor > 
                     | ""

< Base >         ::= LPAREN < Expression > RPAREN
                     | MINUS < Expression >
                     | < Number >

< Number >       ::= INTLIT | REALLIT


Lexer (Regular)
===============
NEWLINE        \n
PLUS           +
MINUS          -
TIMES          *
DIVIDE         /
MOD            MOD
POW            ^
LPAREN         (
RPAREN         )
INTLIT         [0-9]+
REALLIT        INTLIT.INTLIT

Hidden/Utilitiy Tokens
======================
EOI            End of Input
INVALID        Anything that doesn't match